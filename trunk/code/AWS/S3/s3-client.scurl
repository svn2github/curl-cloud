||| Copyright (C) 1998-2010, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
|||
|||     http://www.apache.org/licenses/LICENSE-2.0
|||
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Mana Seino
|||

{curl-file-attributes character-encoding = "utf8"}

|| ----------------------------------------------
|| Makeã€€a request about Amazon S3 and send request
{define-class public S3Client
  {define-proc package {parse-error-xml bis:#ByteInputStream}:void
    let xr:XMLReader = {SAXParser}
    {let handler:ErrorParser = {ErrorParser}}
    {xr.set-content-handler handler}
    {xr.set-error-handler handler}
    
    {try
        {xr.parse {InputSource byte-stream = bis}}
     catch ex:Exception do
        {throw ex}
    }
  }
  field private access-key-id:String
  field private amz-headers:{HashTable-of String, String} = {new {HashTable-of String, String}}
  field private default-host:String
  field private headers:HttpRequestHeaders = {HttpRequestHeaders.default}
  field private secret-key-id:String
  
  || --------------------------------------------
  || default constructor
  {constructor public {default access-key-id:String, secret-key-id:String}
    set self.access-key-id = access-key-id
    set self.secret-key-id = secret-key-id
    set self.default-host = "s3.amazonaws.com"
  }
  
||--  || --------------------------------------------
||--  || TODO: Need to parse ResponseHeader
||--  {method public {head-object bucket:String, key:String}:HttpByteInputStream
||--    
||--    def verb = HttpRequestMethod.head     
||--    let url:Url = {self.return-signature-and-url bucket, key, verb}
||--    let reply:HttpByteInputStream = {uninitialized-value-for-type HttpByteInputStream}
||--    
||--    {try
||--        def reply = {open-http-file url, self.headers, verb}
||--        {return reply}
||--     catch ex:Exception do
||--        {throw ex}
||--     finally
||--        {reply.close}
||--        {self.initialize-headers}
||--    }
||--  }

  || --------------------------------------------
  || Delete bucket
  || (param)
  || bucket: bucket name
  {method public {delete-bucket bucket:String}:void
    
    def verb = HttpRequestMethod.delete
    let uri:Url = {self.return-signature-and-url bucket, "", verb}
    let reply:#HttpByteInputStream
    
    {try 
        set reply = {open-http-file uri, {self.get-headers}, verb}
     catch ex:Exception do
        {throw ex}
     finally
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Get bucket list
  || (return)
  || bucket list
  {method public {get-bucket-list}:Buckets
    def verb = HttpRequestMethod.get
    let url:Url = {self.return-signature-and-url null, "", verb}
    let reply:#HttpByteInputStream
    
    {try
        set reply = {open-http-file url, self.headers, verb}
        {return {self.parse-bucket-xml reply}}
     catch ex:Exception do
        {throw ex}
     finally
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || get object list in bucket
  || (param)
  || bucket: bucket name
  || (return)
  || Object list
  {method public {get-bucket bucket:String}:ObjectsInfo
    def verb = HttpRequestMethod.get
    let url:Url = {self.return-signature-and-url bucket, "", verb}
    let reply:#HttpByteInputStream
    
    {try
        set reply = {open-http-file url, self.headers, verb}
        {return {self.parse-object-xml reply}}
     catch ex:Exception do
        {throw ex}
     finally
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Get object data
  || (param)
  || bucket: bucket name
  || key: object name
  || (return)
  || Object data
  {method public {get-object bucket:String, key:String}:HttpByteInputStream
    
    def verb = HttpRequestMethod.get
    let uri:Url = {self.return-signature-and-url bucket, key, verb}
    let reply:#HttpByteInputStream
    
    {try
        set reply = {open-http-file uri, self.headers, verb}
        {return {non-null reply}}
     catch ex:Exception do
        {throw ex}
     finally
        {self.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Put new bucket
  || (param)
  || bucket: new bucket name
  || acl: ACL
  {method public {put-bucket bucket:String, acl:#String = null}:void
    
    {if {self.bucket-name-valid? bucket} then    
        def verb = HttpRequestMethod.put
        
        {if-non-null acl then
            {self.set-amz-headers "x-amz-acl", acl}
        }
        let url:Url = {self.return-signature-and-url bucket, "", verb}
        let reply:#HttpByteInputStream
        
        {try
            set reply = {open-http-file url, self.headers, verb}
         catch ex:Exception do
            {throw ex}
         finally
            {if reply != null and reply.open? then
                {reply.close}
            }
            {self.initialize-headers}
        }
     else
        {throw {Exception "Bucket name is not valid."}}
    }
  }
  
  || Get amz-headers
  {method package {get-all-amz-headers amz-headers:{HashTable-of String, String}}:String
    let ret:StringBuf = {StringBuf}
    {for element:String in amz-headers do
        {for c:char in element do
            {ret.append c}
        }
        {ret.append 0x000A} || \n
    }
    {return {ret.to-String}}
  }
  
  || get value of header
  {method package {get-header-value key:String}:#String
    let value:#String = ""
    {if {self.headers.key-exists? key} then
        set value = self.headers[key]
    }
    {return value}
  }
  
  
  || --------------------------------------------
  || get HttpRequestHeaders
  {method package {get-headers}:HttpRequestHeaders
    {return self.headers}
  }
  
  || Initialize HttpRequestHeaders and amz-headers
  {method package {initialize-headers}:void
    {self.headers.clear}
    {self.amz-headers.clear}
  }
  
  ||---------------------------------------------
  || set amz-headers and headers
  || Combine header fields with the same name into one as "header-name:comma-separated-value-list"
  {method package {set-amz-headers key:String, value:String}:void
    set self.headers[key]= value
    
    let value-buf:StringBuf = {StringBuf value}
    set key = {key.to-lower-clone}
    {if {self.amz-headers.key-exists? key} then
        set value = {self.amz-headers.get key} & "," & value
    }
    set self.amz-headers[key] = {key.to-lower-clone} & ":" & value
  }
  
  || set headers
  {method package {set-headers key:String, value:String}:void
    set self.headers[key] = value
  }
  
  || --------------------------------------------
  || XML parser
  {method package {parse-object-xml bis:#ByteInputStream}:ObjectsInfo
    let xr:XMLReader = {SAXParser}
    {let handler:ObjectParser = {ObjectParser}}
    {xr.set-content-handler handler}
    {xr.set-error-handler handler}
    
    {try
        || Parse from what is found by opening input-name
        {xr.parse {InputSource byte-stream = bis}}
        {return handler.objects} 
     catch ex:Exception do
        {throw ex}
    }
  }
  
  {method package {parse-bucket-xml bis:#ByteInputStream}:Buckets
    let xr:XMLReader = {SAXParser}
    let handler:BucketParser = {BucketParser}
    {xr.set-content-handler handler}
    {xr.set-error-handler handler}
    
    {try
        || Parse from what is found by opening input-name
        {xr.parse {InputSource byte-stream = bis}}
        
        let buckets:{Array-of Bucket} = {new {Array-of Bucket}}
        {for args:Arguments in handler.list-bucket do
            {buckets.append {Bucket.from-xml {splice args}, s3 = self}}
        }
        {return {Buckets handler.owner, buckets}}
     catch ex:Exception do
        {throw ex}
    }
  }
  
  
  || Set RequestHeaders and Return RequestURL
  || (return)
  || RequestURL
  {method package {return-signature-and-url bucket:#String, key:String, verb:HttpRequestMethod}:Url
    set self.headers["Date"] = {HttpHeaders.date-time-to-http-header-string {DateTime}}
    def resource = {value 
                       {if-non-null bucket then
                           set self.headers["Host"] = bucket & "." & self.default-host
                           "/" & bucket & "/" & key 
                        else
                           set self.headers["Host"] = self.default-host
                           "/" & key
                       }
                   }
    
    let string-to-sign:String =
        {verb.name.to-upper-clone} & "\n" & 
    {self.get-header-value "Content-MD5"} & "\n" &
    {self.get-header-value "Content-Type"} & "\n" &
    {self.get-header-value "Date"} & "\n" &
    {self.get-all-amz-headers self.amz-headers} &
    resource
    
    let sts:ByteVec = {ByteVec max-size = string-to-sign.size * CharEncoding.utf8.transcode-min-expansion-factor}
    
    {encode-characters string-to-sign, sts, CharEncoding.utf8}
    
    def signature = {base64-encode
                        {{Array-of byte}.from-FastArray
                            {hex-decode
                                {hmac-sha-1
                                    self.secret-key-id,
                                    sts
                                }
                            }
                        }
                    }
    set self.headers["Authorization"] = "AWS " & self.access-key-id & ":" & signature
    def url = {abs-url "http://" & self.headers["Host"] & "/" & key}
    
    {return url}
  }
  
  || TODO: Bucket restrictions
  {method private {bucket-name-valid? name:String}:bool
    {if name.size < 3 or name.size > 63 then
        {return false}
     else
        {return true}
    }
  }
}