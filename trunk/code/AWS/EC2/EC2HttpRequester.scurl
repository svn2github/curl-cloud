
{curl-file-attributes character-encoding = "utf8"}

{define-class package EC2HttpRequester
  
  field private signature-generator:SignatureGenerator
  let public constant end-point:String = "ec2.amazonaws.com"
  
  {constructor package {default
                           access-key:String,
                           secret-key:String
                       }
    set self.signature-generator = {SignatureGenerator
                                       access-key,
                                       secret-key
                                   }
  }
  
  || Create Request
  {method private {make-request request-parameters:{Array-of String}}:HttpFile
    || Setup parameters
    def params = {self.get-common-query-parameters}
    {params.concat request-parameters}
    
    || Construct query string
    def query = {StringBuf "?"}
    {for param in params do
        {query.concat param}
        {query.append '&'}
    }
    
    || Create signature
    def signature = {self.signature-generator.generate
                        HttpRequestMethod.get,
                        EC2HttpRequester.end-point,
                        "/",
                        params
                    }
    {query.concat {format "Signature=%s", signature}}
    
    || Request
    def query-str = {query.to-String}
    def req-url = {url {format "%s%s%s%s", "http://", EC2HttpRequester.end-point, "/", query-str}}
    
    {return {req-url.resolve} asa HttpFile}
  }
  
  || Get XML file from EC2
  {method package {request request-parameters:{Array-of String}}:#HttpTextInputStream
    |#    
    || Setup parameters
    def params = {self.get-common-query-parameters}
    {params.concat request-parameters}
    
    || Construct query string
    def query = {StringBuf "?"}
    {for param in params do
        {query.concat param}
        {query.append '&'}
    }
    
    || Create signature
    def signature = {self.signature-generator.generate
                        HttpRequestMethod.get,
                        EC2HttpRequester.end-point,
                        "/",
                        params
                    }
    {query.concat {format "Signature=%s", signature}}
    
    || Request
    def query-str = {query.to-String}
    def req-url = {url {format "%s%s%s%s", "http://", EC2HttpRequester.end-point, "/", query-str}}
    def http-file = {req-url.resolve} asa HttpFile
#|
    def http-file = {self.make-request request-parameters}
    {try
        def response = {http-file.http-read-open always-return-response-headers? = true}
        || If HTTP response status code is 2xx(Success), returns a HttpTextInputStream
        {if response.response-headers.status / 100 == 2 then
            {return response}
         else
            || FIXME : Cannot receive XML when response header status is 401
            let parser:SAXParser = {SAXParser}
            let handler:EC2ErrorHandler = {EC2ErrorHandler}
            {parser.set-content-handler handler}
            {parser.set-error-handler handler}
            {parser.parse {InputSource character-stream = response}}
            def error = handler.ec2-errors[0]
            {throw {EC2Exception error.code, error.message}}
        }
    }
  }
  
  || Get XML file from EC2 (Async)
  {method package {async-request
                      request-parameters:{Array-of String},
                      request-proc:{proc-type {#HttpTextInputStream,
                                               #Exception,
                                               bool
                                              }:void}
                  }:AsyncFileOpener
    def http-file = {self.make-request request-parameters}
    
    def afo = {http-file.http-async-read-open
                  always-return-response-headers? = true,
                  {on afoe:AsyncFileOpenEvent do
                      {if-non-null e = afoe.exception then
                          {request-proc null, e, false}
                       elseif afoe.canceled? then
                          {request-proc null, null, true}
                       else
                          def response = (afoe.stream asa HttpTextInputStream)
                          || If HTTP response status code is 2xx(Success), 
                          || returns a HttpTextInputStream
                          {if response.response-headers.status / 100 == 2
                           then
                              {request-proc response, null, false}
                           else
                              let parser:SAXParser = {SAXParser}
                              let handler:EC2ErrorHandler = {EC2ErrorHandler}
                              {parser.set-content-handler handler}
                              {parser.set-error-handler handler}
                              {parser.parse {InputSource character-stream = response}}
                              def error = handler.ec2-errors[0]
                              {request-proc null, {EC2Exception error.code, error.message}, false}
                          }
                      }
                  }
              }
    {return afo}
  }
  
  {method private {get-timestamp}:String
    def time:DateTime = {DateTime zone = DateTimeZone.utc}
    let timestamp:String = {format "%sT%sZ", time.info.iso-date, time.info.iso-time}
    set timestamp = {url-encode-filename timestamp}
    set timestamp = {timestamp.to-upper-clone}
    {return timestamp}
  }
  
  {method private {get-common-query-parameters}:{Array-of String}
    {return {{Array-of String}
                "Version=2010-06-15",
                {format "AWSAccessKeyId=%s", self.signature-generator.access-key},
                {format "Timestamp=%s", {self.get-timestamp}},
                "SignatureMethod=HmacSHA1",
                "SignatureVersion=2"
            }
    }
  }
}
