{curl-file-attributes character-encoding = "shift-jis"}

{import * from CURL.XML.SAX.PARSER}

{let package xr:XMLReader = {SAXParser}}
{let public parse-output:VBox = {VBox}}
{let public buckets:{Array-of Bucket} = {new {Array-of Bucket}}}

{define-proc public {parse-xml
                        input-stream:#ByteInputStream
                    }:void
    || clear the parse output of any previous xml file
    {parse-output.clear}
    
    {let handler:SAX = {SAX.default parse-output, buckets}}
    {xr.set-content-handler handler}
    {xr.set-error-handler handler}
    
    {try
        || Parse from what is found by opening input-name
        {xr.parse {InputSource byte-stream = input-stream}}
        
     catch file-exception:IOException do
        || Handle any exception thrown due to the file read
        {parse-output.add
            {text color="red",
                A problem occurred while reading the file:
                {value file-exception}
            }
        }
     catch parse-exception:SAXParseException do
        || Handle any exception thrown while parsing the XML
        {parse-output.add
            {text color="red",
                A problem occurred parsing the XML file:
                {error-message parse-exception}
            }
        }
    }
}

{define-class public SAX {inherits DefaultHandler}
  
  field private output:VBox
  field private nesting-depth:int
  field private flag:String = ""
  field private buckets:{Array-of Bucket}
  field private bucket:Bucket = {Bucket.default "", ""}
  
  {constructor public {default parse-output:VBox, buckets:{Array-of Bucket}}
    set self.output = parse-output
    set self.buckets = buckets
    {construct-super}
  }
  
  {method public {start-document}:void
    set self.nesting-depth = 0
    {self.output.add
        {text color="purple", Start document}
    }
  }
  
  {method public {end-document}:void
    {self.output.add
        {text color="purple", End document}
    }
  }
  
  {method public {start-element
                     uri:String,
                     name:String,
                     qname:String,
                     atts:Attributes
                 }:void
    set self.nesting-depth = self.nesting-depth + 1
    {self.output.add
        {HBox
            {Fill width = self.nesting-depth * 0.2in},
            {text color="navy", < },
            {text color="fuchsia", {value name}},
            {text color="navy", >}
        }
    }
    
    {if name == "Bucket" then
        set self.flag = "bucket"
    }
  }
  
  {method public {end-element
                     uri:String,
                     name:String,
                     qname:String
                 }:void
    {self.output.add
        {HBox
            {Fill width = self.nesting-depth * 0.2in},
            {text color="navy", </ },
            {text color="fuchsia", {value name}},
            {text color="navy", > }
        }
    }
    set self.nesting-depth = self.nesting-depth - 1
    set self.flag = ""
  }
  
  {method public {characters
                     ch:StringBuf,
                     start:int,
                     length:int
                 }:void
    {self.output.add
        {HBox
            {Fill width = self.nesting-depth * 0.3in},
            {text {ch.substr start, length}}
        }
    }
    
    {if self.flag == "name" then
        {self.buckets.append {Bucket.default {ch.substr start, length}, "date"}}
    }
    
  }
  
  {method public {error exception:SAXParseException}:void
    {throw exception}
  }
  
  {method public {fatal-error exception:SAXParseException}:void
    {throw exception}
  }
  
  {method public {warning exception:SAXParseException}:void
    {throw exception}
  }
  
}

{define-proc {error-message parse-exception:SAXParseException}:String
    let sb:StringBuf={StringBuf "Error detected"}
    {if {parse-exception.get-line-number} != 0
     then
        {sb.concat " at line " & {parse-exception.get-line-number}}
        {if {parse-exception.get-system-id} != null
         then
            {sb.concat " of " & {parse-exception.get-system-id}}
        }
    }
    {sb.concat ": " & {parse-exception.get-message}}
    {return {sb.to-String}}
}
