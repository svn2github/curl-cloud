{curl-file-attributes character-encoding = "shift-jis"}
|| ----------------------------------------------
|| Bucket
{define-class public Bucket
  field public-get private-set name:String
  field public-get private-set creation-date:DateTime
  field private s3:S3Client
  
  {constructor public {default
                           name:String,
                           creation-date:DateTime,
                           s3:S3Client
                       }
    set self.name = name
    set self.creation-date = creation-date
    set self.s3 = s3
  }  
  
  {factory package {from-xml
                       name:String = "",
                       creationdate:String = "",
                       s3:S3Client = {S3Client "", ""},
                       ...
                   }:Bucket
    {return {Bucket name, {DateTime creationdate}, s3}}
  }
  
  || --------------------------------------------
  || Delete bucket
  {method public {delete-bucket}:void
    
    def verb = HttpRequestMethod.delete
    let uri:Url = {self.s3.return-signature-and-url self.name, "", verb}
    let reply:#HttpByteInputStream
    
    {try 
        set reply = {open-http-file uri, {self.s3.get-headers}, verb}
        
     catch ex:Exception do
        {throw ex}
     finally
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.s3.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || delete-object
  || (param)
  || key: delete object name
  || error-if-object-exists?: Trueの場合、削除するディレクトリの中にオブジェクトが存在するときはエラーを返す
  {method public {delete-object key:String, error-if-object-exists?:bool = false}:void
    
    let reply:#HttpByteInputStream
    
    {try
        let objects-info:ObjectsInfo = {self.get-directory key}
        {if objects-info.object-info.empty? == false and error-if-object-exists? then
            || ディレクトリの中にオブジェクトが存在する　かつ　エラーを返してほしい
            {throw {S3Exception "NotEmpty", "Directory is not empty."}}
         else
            {for o:ObjectInfo in objects-info.object-info do
                || ディレクトリの中身を全削除
                {self.delete-object o.key}
            }
        }
        def verb = HttpRequestMethod.delete
        let url:Url = {self.s3.return-signature-and-url self.name, key, verb}
        set reply = {open-http-file url, {self.s3.get-headers}, verb}
     catch ex:Exception do
        {throw ex}
     finally
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.s3.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Get list object in bucket
  || (return)
  || Object list
  {method public {get-bucket}:ObjectsInfo
    def verb = HttpRequestMethod.get
    let url:Url = {self.s3.return-signature-and-url self.name, "", verb}
    let reply:#HttpByteInputStream
    set url = {url.set-query "?prefix=&delimiter=/"}
    
    {try
        set reply = {open-http-file url, {self.s3.get-headers}, verb}
        {return {self.s3.parse-object-xml reply}}
     catch ex:Exception do
        {throw ex}
     finally
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.s3.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Get directory
  || (param)
  || key: directory name
  || (return)
  || Object list
  {method public {get-directory key:String}:ObjectsInfo
    def verb = HttpRequestMethod.get
    let url:Url = {self.s3.return-signature-and-url self.name, "", verb}
    set url = {url.set-query  "?prefix=" & key & "&delimiter=/"}
    let reply:#HttpByteInputStream
    
    {try
        set reply = {open-http-file url, {self.s3.get-headers}, verb}
        {return {self.s3.parse-object-xml reply}}
     catch ex:Exception do
        {throw ex}
     finally
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.s3.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Get object data
  || (param)
  || key: Object name
  || (return)
  || Object data
  {method public {get-object key:String}:HttpByteInputStream
    
    def verb = HttpRequestMethod.get
    let uri:Url = {self.s3.return-signature-and-url self.name, key, verb}
    let reply:#HttpByteInputStream
    
    {try
        set reply = {open-http-file uri, {self.s3.get-headers}, verb}
        {return {non-null reply}}
     catch ex:Exception do
        {throw ex}
     finally
||++    {reply.close}
        {self.s3.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Put folder
  || (param)
  || key: folder name
  || acl: ACL　(e.g. "public-read")
  {method public {put-directory
                     key:String,
                     acl:#String = null
                 }:void
    
    def verb = HttpRequestMethod.put
    
    {if-non-null acl then
        {self.s3.set-amz-headers "x-amz-acl", acl}
    }
    set key = key & "/"
    let url:Url = {self.s3.return-signature-and-url self.name, key, verb}
    let reply:#HttpByteInputStream
    
    {try
        set reply = {open-http-file url, {self.s3.get-headers}, verb}
     catch ex:Exception do
        {throw ex}
     finally
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.s3.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Put object by bytes
  || (param)
  || key: object name
  || object: object data
  || acl: ACL　(e.g. "public-read")
  {method public {put-object-by-bytes
                     key:String,
                     object:ByteArray,
                     acl:#String = null
                 }:void
    
    def content-type = {file-extension-to-mime-type {url "./" & key}.extension}
    def verb = HttpRequestMethod.put
    
    {if-non-null acl then
        {self.s3.set-amz-headers "x-amz-acl", acl}
    }
    {if-non-null content-type then
        {self.s3.set-headers "Content-Type", content-type}
    }
    
    let url:Url = {self.s3.return-signature-and-url self.name, key, verb}
    let reply:#HttpByteInputStream
    
    {try
        set reply = {open-http-file
                        url,
                        {self.s3.get-headers},
                        verb,
                        data = {ByteArrayHttpRequestData object}
                    }
     catch ex:Exception do
        {throw ex}
     finally
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.s3.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Put object by URL (file path)
  || (param)
  || key: object name
  || uri: file path
  || acl: ACL　(e.g. "public-read")
  {method public {put-object-by-url
                     key:String,
                     uri:Url,
                     acl:#String = null
                 }:void
    
    def content-type = {file-extension-to-mime-type {url "./" & key}.extension}
    def verb = HttpRequestMethod.put
    
    {if-non-null acl then
        {self.s3.set-amz-headers "x-amz-acl", acl}
    }
    {if-non-null content-type then
        {self.s3.set-headers "Content-Type", content-type}
    }
    
    let url:Url = {self.s3.return-signature-and-url self.name, key, verb}
    let reply:#HttpByteInputStream
    
    {try
        def data = {open-byte-file uri}
        set reply = {open-http-file
                        url,
                        {self.s3.get-headers},
                        verb,
                        data = {ByteArrayHttpRequestData data}
                    }
     catch ex:Exception do
        {throw ex}
     finally
        
        {if reply != null and reply.open? then
            {reply.close}
        }
        {self.s3.initialize-headers}
    }
  }
  
  || --------------------------------------------
  || Write object to local file
  {method public {write-file hbis:HttpByteInputStream, uri:Url}:void
    {try
        {with-open-streams bos:ByteOutputStream = {write-open-byte uri} do
            {bos.write {{{ByteInputStream-from {Array-of byte}} {hbis.read}}.read}}
            {bos.flush}
        }
     catch ex:Exception do
        {throw ex}
    }
  }
}

|| ----------------------------------------------
|| Bucket list
{define-class public Buckets
  field public-get private-set owner:Owner
  field public-get private-set buckets:{Array-of Bucket}
  
  {constructor package {default
                          owner:Owner,
                          buckets:{Array-of Bucket}
                      }
    set self.owner = owner
    set self.buckets = buckets
  }
  
  {factory package {from-xml
                       owner:Owner = {Owner "id", "name"},
                       buckets:{Array-of Bucket} = {new {Array-of Bucket}},
                       ...
                   }:Buckets
    {return {Buckets owner, buckets}}
  }
  
  || バケット名がnameであるバケットとtrueを返す
  || そのようなバケットがなかった場合、falseを返す
  {method public {get-if-exist name:String}:(Bucket, bool)
    let bucket:Bucket = {uninitialized-value-for-type Bucket}
    {for b:Bucket in self.buckets do
        {if b.name == name then
            set bucket = b
            {return bucket, true}
        }
    }
    {return bucket, false}
  }  
  
}