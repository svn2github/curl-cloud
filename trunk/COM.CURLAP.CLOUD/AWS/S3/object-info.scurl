||| Copyright (C) 1998-2010, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
|||
|||     http://www.apache.org/licenses/LICENSE-2.0
|||
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @authors Mana Seino
|||

{curl-file-attributes character-encoding = "utf8"}
|| ----------------------------------------------
|| Object info
{define-class public abstract ObjectInfo
  field public-get private-set key:String
  
  {constructor public {default
                           key:String
                       }
    set self.key = key
  }
  
  {method public {key-exist? key:String}:bool
    {if {self.key.find-string key} >= 0 then
        {return true}
     else
        {return false}
    }
  }
}

{define-class public FileInfo {inherits ObjectInfo}
  field public-get private-set last-modified:DateTime
  field public-get private-set etag:String
  field public-get private-set size:int
  field public-get private-set storage-class:String
  field public-get private-set owner:Owner
  
  {constructor public {default
                          key:String,
                          last-modified:DateTime,
                          etag:String,
                          size:int,
                          storage-class:String,
                          owner:Owner
                      }
    {construct-super key}
    set self.last-modified = last-modified
    set self.etag = etag
    set self.size = size
    set self.storage-class = storage-class
    set self.owner = owner
  }
  
  {factory package {from-xml
                       key:String = "",
                       lastmodified:String = "",
                       etag:String = "",
                       size:String = "",
                       storageclass:String = "",
                       owner:Owner = {Owner "", ""},
                       ...
                   }:FileInfo
    {return {FileInfo
                key,
                {DateTime lastmodified},
                etag,
                {size.to-int},
                storageclass,
                owner
            }
    }
  }
}

{define-class public DirectoryInfo {inherits ObjectInfo}
  
  {constructor public {default
                          key:String
                      }
    {construct-super key}
  }
  
  {factory package {from-xml
                       key:String = "",
                       ...
                   }:DirectoryInfo
    {return {DirectoryInfo
                key
            }
    }
  }
}

{define-class public ObjectsInfo
  field public-get private-set object-info:{Array-of ObjectInfo}
  field public-get private-set name:String
  field public-get private-set prefix:String
  field public-get private-set marker:String
  field public-get private-set max-keys:int
  field public-get private-set delimiter:String
  field public-get private-set is-truncated?:bool
  
  {constructor package {default
                           object-info:{Array-of ObjectInfo},
                           name:String,
                           prefix:String,
                           marker:String,
                           max-keys:int,
                           delimiter:String,
                           is-truncated?:bool
                       }
    set self.object-info = object-info
    set self.name = name
    set self.prefix = prefix
    set self.marker = marker
    set self.max-keys = max-keys
    set self.delimiter = delimiter
    set self.is-truncated? = is-truncated?
    
    {self.object-info.filter
        {proc {o:ObjectInfo}:bool
            {type-switch o
             case f:FileInfo do
                || If object is directory and object.key equal current directory, object remove object-list
                {if f.key[f.key.size - 1] == '/' then
                    {return f.key != self.prefix}
                }
            }
            {return true}
        }
    }
  }
  
  {factory package {from-xml
                       object-info:{Array-of ObjectInfo} = {new {Array-of ObjectInfo}},
                       name:String = "",
                       prefix:String = "",
                       marker:String = "",
                       maxkeys:String = "",
                       delimiter:String = "",
                       istruncated:String = "",
                       ...
                   }:ObjectsInfo
    
    let is-truncated?:bool =
        {switch istruncated
         case "true" do
            true
         else
            false
        }
    
    {return {ObjectsInfo
                object-info,
                name,
                prefix,
                marker,
                {maxkeys.to-int},
                delimiter,
                is-truncated?
            }
    }
  }
  
  {method public {get-object-info key:String}:(ObjectInfo, bool)
    let object:ObjectInfo = {uninitialized-value-for-type ObjectInfo}
    {for o:ObjectInfo in self.object-info do
        let object-key:String =
            {type-switch o
             case d:DirectoryInfo do
                {d.key.trim-right-clone trim-chars = {CharClass "/"}}
             else
                o.key
            }
        {if object-key == key then
            set object = o
            {return object, true}
        }
    }
    {return object, false}
    
    
  }
  
  {method public {get-parent-directory}:String
    let parent-dir:String = ""
    let s:String = {self.prefix.trim-right-clone trim-chars = {CharClass "/"}}
    let i:int = {s.find-string "/", search-direction = SearchDirection.backward}
    {if i >= 0 then
        set parent-dir = {s.substr 0, {s.find-string "/", search-direction = SearchDirection.backward} + 1}
    }
    {return parent-dir}
  }
}

|| ----------------------------------------------
|| Owner
{define-class public Owner
  field public-get private-set id:String
  field public-get private-set display-name:String
  
  {constructor package {default id:String, display-name:String}
    set self.id = id
    set self.display-name = display-name
  }
  
  {factory package {from-xml
                       id:String = "",
                       displayname:String = "",
                       ...
                   }:Owner
    {return {Owner id, displayname}}
  }
}