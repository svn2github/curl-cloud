{curl-file-attributes character-encoding = "utf8"}

|| ======== S3 Base Data Classes ========
|| TODO: remove these, link with actual data classes

||--|| bucket
||--{define-class package Bucket
||--  field public-get private-set name:String = "Test Bucket"
||--  field public-get private-set creation-date:DateTime = {DateTime}
||--}

||--|| object
||--{define-class package ObjectInfo
||--  field public-get private-set key:String = ""
||--  field public-get private-set last-modified:DateTime = {DateTime}
||--  field public-get private-set etag:String = ""
||--  field public-get private-set size:int = 0
||--  field public-get private-set storage-class:String = ""
||--  field public-get private-set owner:#Owner
||--  
||--  {constructor package {default
||--                          key:String,
||--                          last-modified:DateTime,
||--                          etag:String,
||--                          size:int,
||--                          storage-class:String,
||--                          owner:#Owner
||--                      }
||--    set self.key = key
||--    set self.last-modified = last-modified
||--    set self.etag = etag
||--    set self.size = size
||--    set self.storage-class = storage-class
||--    set self.owner = owner
||--  }
||--  
||--}

||--|| owner
||--{define-class package Owner
||--  field public-get private-set id:String = ""
||--  field public-get private-set display-name:String = ""  
||--}

|| ======== Browser Model ========

|| The RecordFields needed for a bucket set.
{def package bucket-set-fields =
    {RecordFields
        {RecordField
            "key",
            caption = {hlmessage Name},
            domain = String,
            index-type = RecordFieldIndexType.unique
        },
        {RecordField
            "last-modified",
            caption = {hlmessage Date Modified},
            domain = DateTime
        },
        {RecordField
            "etag",
            caption = {hlmessage etag},
            domain = String
        },
        {RecordField
            "size",
            caption = {hlmessage Size},
            domain = int
        },
        {RecordField
            "storage-class",
            caption = {hlmessage Storage Class},
            domain = String
        },
        {RecordField
            "owner",
            caption = {hlmessage Owner},
            domain = any,
            nullable? = true
        },
        || TODO: how do we get this information? Also what Domain to use?
        {RecordField
            "type",
            caption = {hlmessage Type},
            domain = String
        }        
    }
}

{define-class public open BucketModel
  
  field public-get private-set bucket:Bucket
  field private _path:String = ""
  field package record-set:RecordSet
  
  {constructor public {default bucket:Bucket}
    set self.bucket = bucket
    set self.record-set = 
        {RecordSet
            bucket-set-fields,
            modifiable? = true
        }
  }
  
  {getter public open {valid?}:bool
    || TODO: return false when we cannot access.
    {return true}
  }
  
  {getter public open {path}:String
    {return self._path}
  }
  {setter public open {path s:String}:void
    {if s != self._path then
        set self._path = s
    }
  }
  
  {method private {clear-records}:void
    {self.record-set.delete-all}
  }
  
  {method public open {delete-object key:String}:void
    def rd = {RecordData key = key}
    {if-non-null r = {self.record-set.select-one filter = rd} then
        {self.internal-delete-object key}
        {r.delete}
     else
        {error "internal error"}
    }
  }
  
  {method public open {delete-object-by-record r:Record}:void
    {if r.record-set != self.record-set then
        {error "internal error"}
    }
    def key = {r.get "key"} asa String
    {self.internal-delete-object key}
    {r.delete}
  }
  
  ||----> TODO: implement the following features to interact with S3
  
  {getter public {path-at-root?}:bool
    || TODO: figure out if the path is root or not.
    {return false}
  }
  
  || Decompose an info bundle into a Record and add it.
  {method package {add-object-info i:ObjectInfo}:void
    def new-record = {self.record-set.new-record}
    {new-record.set "key", i.key}
    {new-record.set "last-modified", i.last-modified}
    {new-record.set "etag", i.etag}
    {new-record.set "size", i.size}
    {new-record.set "storage-class", i.storage-class}
    {new-record.set "owner", i.owner}
    || TODO: somehow set type -- what's the interface?
    {new-record.set "type", "File?"}    
    {self.record-set.append new-record}
  }
  
  {method private {note-path-changed}:void
    {self.clear-records}
    || TODO: add appropriate objects for new path    
  }
  
  {method public open {go-to-parent}:void
    || s3 up one level on path
  }
  
  {method public open {add-folder key:String}:void
    || s3 add folder operation
  }
  
  {method public open {add-object-from-url object-url:Url}:void
    || s3 add object operation
    || HACK: for testing purposes
    {type-switch {object-url.resolve}
     case f:LocalFile do
        {if-non-null info = {f.info} then
            {self.add-object-info
                {ObjectInfo
                    object-url.filename,
                    info.modified,
                    "etag",
                    info.size asa int,
                    "class",
                    null
                }
            }            
        }
    }
  }
  
  {method public open {download-object
                          key:String,
                          dir:LocalDirectory
                      }:void
    || s3 download object operation
  }
  
  {method private {internal-delete-object key:String}:void
    || s3 delete object operation
  }
  
}

|| ======== Browser Interface Helpers ========

{def pretty-byte-format-proc =
    {proc {data:any}:String
        {dump {type-of data}, data}
        {type-switch data
         case i:int do
            {if i == 1 then
                {return {format "1 Byte"}}
             elseif i < 1000 then
                {return {format "%d Bytes", i}}
             elseif i < 1000000 then
                {return {format "%.1f KB", i / 1000}}
             elseif i <= 1000000000 then
                {return {format "%.1f MB", i / 1000000}}
             else
                {return {format "%.1f GB", i / 1000000000}}
            }
         case i:int64 do
            {if i == 1 then
                {return {format "1 Byte"}}
             elseif i < 1000 then
                {return {format "%d Bytes", i}}
             elseif i < 1000000 then
                {return {format "%.1f KB", i / 1000}}
             elseif i <= 1000000000 then
                {return {format "%.1f MB", i / 1000000}}
             else
                {return {format "%.1f GB", i / 1000000000}}
            }
         else
            {return ""}
        }
    }
}

{define-class public open IconLabelCell {inherits StandardFixedStringCell}
  
  field private icon-frame:Frame
  
  {constructor public {default}
    {construct-super}
    {self.clear}
    set self.icon-frame = {Frame width = 16px, height = 16px}
    {self.add-internal
        {HBox
            spacing = 2px,
            valign = 0.5,
            self.icon-frame,
            self.display-graphic
        }
    }
  }
  
  {method public open {refresh-data}:void
    {super.refresh-data}
    {if-non-null rec = self.record then
        {type-switch {rec.get "type"}
         case s:String do
            {switch s
             case "directory" do
                set self.icon-frame.background = "yellow"
             else
                set self.icon-frame.background = "red"
            }
        }
    }
  }
  
}

{define-class public open BucketBrowserGridUI {inherits SkinnableRecordGridUI}
  
  field package bucket-browser:#BucketBrowser
  
  {constructor public {default
                          bucket-browser:#BucketBrowser = null,
                          control-skin:#RecordGridSkin = null,
                          control-feel:#RecordGridFeel = null,
                          ...
                      }
    set self.bucket-browser = bucket-browser
    {construct-super
        control-skin = control-skin,
        control-feel = control-feel,
        ...
    }
  }
  
  {method public open {context-menu-at
                          x:Distance,
                          y:Distance
                      }:#MenuPane
    
    let constant grid:RecordGrid = self.grid
    let constant dr:RecordView = grid.records
    def selection = grid.selection
    
    let constant (cell:#RecordGridCell, rec:int, col:int) =
        {self.grid-objects-at x, y}
    
    let constant mp:MenuPane = {MenuPane}
    
    let constant selection-empty?:bool = grid.selection.empty?
    
    {if-non-null bb = self.bucket-browser then
        def dow-s = "bucketbrowser.download-selection"
        {if-non-null dl-command = {bb.get-command dow-s} then
            {if-non-null impl = dl-command.impl then
                {mp.add
                    {MenuAction
                        label = {hlmessage Download Selection},
                        enabled? = impl.enabled?,
                        {on Action do
                            {impl.do-command}
                        }
                    }
                }
            }
        }
        def del-s = "bucketbrowser.delete-selection"
        {if-non-null dl-command = {bb.get-command del-s} then
            {if-non-null impl = dl-command.impl then
                {mp.add
                    {MenuAction
                        label = {hlmessage Delete Selection},
                        enabled? = impl.enabled?,
                        {on Action do
                            {impl.do-command}
                        }
                    }
                }
            }
        }
    }
  
    {return mp}
  }
  
}

|| ======== Main Browser Interface ========

{define-class public open BucketBrowser {inherits Frame, CommandContext}
  
  || external attachments
  field private _bucket-model:#BucketModel
  
  || internal state
  field private _default-download-directory:#LocalDirectory
  
  || internal controls and Graphics
  field private record-grid:RecordGrid
  field private add-folder-button:CommandButton
  field private add-object-button:CommandButton
  field private delete-selection-button:CommandButton
  field private path-up-level-button:CommandButton
||--  field private return-button:CommandButton
||--  field private title-frame:Frame
  field private main-frame:SkinnableFrame
  
  {constructor public {default
                          bucket-model:#BucketModel = null,
                          ...
                      }
    set self._bucket-model = bucket-model
    {construct-super.CommandContext}
    {construct-super.Frame ...}
    
    set self.main-frame = {SkinnableFrame}
||++set self.title-frame =
||++    {Frame font-size = 18pt, font-weight = FontWeight.bold}
    set self.record-grid =
        {RecordGrid
            width = {make-elastic preferred-size = 50cm}
        }
    set self.add-folder-button =
        {CommandButton
            label = {hlmessage Add Folder},
            bound-command = {self.get-command "bucketbrowser.add-folder"}
        }
    set self.add-object-button =
        {CommandButton
            label = {hlmessage Upload Object(s)},
            bound-command = {self.get-command "bucketbrowser.add-objects"}
        }
    set self.delete-selection-button =
        {CommandButton
            label = {hlmessage Delete Selection},
            bound-command = {self.get-command "bucketbrowser.delete-selection"}
        }
||++set self.return-button =
||++    {CommandButton
||++        label = {hlmessage Return to Cloud},
||++        width = 3cm,
||++        bound-command = {self.get-command "bucketbrowser.return-to-cloud"}
||++    }
    set self.path-up-level-button =
        {CommandButton
            label = {hlmessage Parent Dir},
            bound-command = {self.get-command "bucketbrowser.go-to-parent"}
        }
    
    {self.setup-record-grid}
    {if-non-null bucket-model then
        {self.note-bucket-model-changed}
    }
    {self.setup-layout}
  }
  
  {method protected open {create-command name:String}:#Command
    {switch name
     case "bucketbrowser.download-selection" do
        {return
            {SimpleCommand
                "bucketbrowser.download-selection",
                execute-proc =
                    {proc {}:void
                        {self.download-selection}
                    },
                enabled-proc =
                    {proc {}:bool
                        {return
                            {if-non-null m = self.bucket-model then
                                m.valid? and
                                self.record-grid.selection.record-count > 0
                             else
                                false
                            }
                        }
                    }
            }
        }
     case "bucketbrowser.go-to-parent" do
        {return
            {SimpleCommand
                "bucketbrowser.go-to-parent",
                execute-proc =
                    {proc {}:void
                        {self.go-to-parent}
                    },
                enabled-proc =
                    {proc {}:bool
                        {return
                            {if-non-null m = self.bucket-model then
                                m.valid? and
                                not m.path-at-root?
                             else
                                false
                            }
                        }
                    }
            }
        }
     case "bucketbrowser.delete-selection" do
        {return
            {SimpleCommand
                "bucketbrowser.delete-selection",
                execute-proc =
                    {proc {}:void
                        {self.delete-selection}
                    },
                enabled-proc =
                    {proc {}:bool
                        {return
                            {if-non-null m = self.bucket-model then
                                m.valid? and
                                not self.record-grid.selection.empty?
                             else
                                false
                            }
                        }
                    }
            }
        }
     case "bucketbrowser.add-objects" do
        {return
            {SimpleCommand
                "bucketbrowser.add-objects",
                execute-proc =
                    {proc {}:void
                        {self.choose-and-add-objects}
                    },
                enabled-proc =
                    {proc {}:bool
                        {return
                            {if-non-null m = self.bucket-model then
                                m.valid?
                             else
                                false
                            }
                        }
                    }
            }
        }
     case "bucketbrowser.add-folder" do
        {return
            {SimpleCommand
                "bucketbrowser.add-folder",
                execute-proc =
                    {proc {}:void
                        {self.add-folder}
                    },
                enabled-proc =
                    {proc {}:bool
                        {return
                            {if-non-null m = self.bucket-model then
                                m.valid?
                             else
                                false
                            }
                        }
                    }
            }
        }
||++ case "bucketbrowser.return-to-cloud" do
||++    {return
||++        {SimpleCommand
||++            "bucketbrowser.return-to-cloud",
||++            execute-proc =
||++                {proc {}:void
||++                    {self.return-to-cloud}
||++                },
||++            enabled-proc =
||++                {proc {}:bool
||++                    {return true}
||++                }
||++        }
||++    }
    }
    
    {return {super.create-command name}}
  }
    
  || Access the bucket model.
  {getter public open {bucket-model}:#BucketModel
    {return self._bucket-model}
  }
  {setter public open {bucket-model m:#BucketModel}:void
    {if m != self._bucket-model then
        set self._bucket-model = m
        {self.note-bucket-model-changed}
    }
  }
  {method private {note-bucket-model-changed}:void
    {if-non-null m = self.bucket-model then
        set self.record-grid.record-source = m.record-set
||++    {self.title-frame.add replace? = true, m.bucket.name}
     else
        set self.record-grid.record-source = null
||++    {self.title-frame.clear}
    }
    {self.request-update-commands}
  }
  
  || Set the default directory for downloads.
  || This directory could be used if a download button is pressed;
  || any to-external DnD would just go to the dropped target.
  {getter public open {default-download-directory}:#LocalDirectory
    {return self._default-download-directory}
  }
  {setter public open {default-download-directory ldir:#LocalDirectory}:void
    {if ldir != self._default-download-directory then
        set self._default-download-directory = ldir
    }
  }
  
  {method private {setup-record-grid}:void
    def rg = self.record-grid
    
    || Use our special UI.
    set rg.ui-object = {BucketBrowserGridUI bucket-browser = self}
    
    || We have a unique value, so use that.
    set rg.key-spec = "key"
    
    || We neither need nor want cells to be messed with by the user.
    set rg.editable? = false
    set rg.cells-take-focus? = false
    
    || Only record selection makes sense.
    set rg.select-current-record? = true
    set rg.column-selection-enabled? = false
    set rg.region-selection-enabled? = false
    set rg.record-selection-enabled? = true
    set rg.multiple-selection-enabled? = true
    
    || Set various appearance options.
    set rg.horizontal-grid-line-width = 0m
    set rg.vertical-line-color = FillPattern.transparent
    set rg.grid-line-color = FillPattern.transparent
    def gray-factor = 0.92
    set rg.alternate-row-background =
        {FillPattern.from-rgb gray-factor, gray-factor, gray-factor}
    set rg.skin = null
    set rg.display-navigation-panel? = false
    set rg.border-width = 2px
    set rg.display-record-selectors? = false
    
    || Set columns and cell formatting.
    set rg.automatic-columns? = false
    set rg.columns =
        {new {Array-of RecordGridColumn},
            {RecordGridColumn
                "key",
                width = 10.2cm,
                cell-spec = IconLabelCell
            },
            {RecordGridColumn
                "size",
                width = 2cm,
                halign = 1,
                format-spec = pretty-byte-format-proc
            },
            {RecordGridColumn
                "last-modified",
                width = 3.5cm
            },
            {RecordGridColumn
                "type",
                width = 2cm
            },
            {RecordGridColumn
                "storage-class",
                width = 3cm
            }
        }
    
    || Setup event handlers.
    {rg.add-event-handler
        {on Action do
            {self.handle-grid-action-event}
        }
    }
    {rg.add-event-handler
        {on SelectionChanged do
            {self.request-update-commands}
        }
    }
    {rg.add-event-handler
        {on e:DragOver do
            {e.will-accept-drop?
                {proc {type:Type,
                       x:Distance,
                       y:Distance,
                       effect:#DragEffect
                      }:DragEffect
                    {switch type
                     case Url, UrlArray do
                        {return drag-effect-copy}
                    }
                    {return drag-effect-none}
                }
            }
        }
    }
    {rg.add-event-handler
        {on e:Drop do
            {e.accept-drop
                {proc {a:any,
                       x:Distance,
                       y:Distance,
                       effect:#DragEffect
                      }:DropResult
                    {type-switch a
                     case u:Url do
                        {return
                            {DropResultCopy
                                action =
                                    {proc {}:void
                                        {self.handle-dropped-url u}
                                    }
                            }
                        }
                     case u:UrlArray do
                        {return
                            {DropResultCopy
                                action =
                                    {proc {}:void
                                        {self.handle-dropped-url-array u}
                                    }
                            }
                        }
                    }
                    {return {DropResultNone}}
                }
            }
        }
    }
  }
  
  {method private {handle-grid-action-event}:void
    def sel = self.record-grid.selection
    || If there's only one directory selected, open it.
    {if sel.record-count == 1 then
        {for record-index in sel.records do
            def rec = {self.record-grid.records.get record-index}
            {type-switch {rec.get "type"}
             case s:String do
                {switch s
                 case "directory" do
                    || TODO: open/set path to new directory
                }
            }
        }
    }
    {if sel.record-count > 0 then
        {self.download-selection}
    }
  }
  
  {method private {handle-dropped-url u:Url}:void
    {self.confirm-add-objects {UrlArray u}}
  }
  
  {method private {handle-dropped-url-array url-array:UrlArray}:void
    {self.confirm-add-objects url-array}
  }
  
  {method public open {setup-layout}:void
    {self.main-frame.add
        {VBox
            width = {add-stretch},
            spacing = 2mm,
||--            {HBox
||--                valign = 0.5,
||--                {Frame
||--                    width = {add-stretch},
||--                    {Fill width = 3cm}
||--                },
||--                self.title-frame
||--||++            {Frame
||--||++                width = {add-stretch before? = true, after? = false},
||--||++                halign = 1,
||--||++                self.return-button
||--||++            }
||--            },
            {HBox
                width = {add-stretch},
                height = 40px,
                spacing = 3mm,
                self.path-up-level-button,
                {Fill},
                self.add-folder-button,
                self.add-object-button,
                self.delete-selection-button
            },
            self.record-grid
        }
    }
    {self.add self.main-frame, replace? = true}
  }
  
  {method private {get-selected-keys}:{Array-of String}
    def sel = self.record-grid.selection
    def key-list = {new {Array-of String}}
    {for record-index in sel.records do
        def rec = {self.record-grid.records.get record-index}
        {key-list.append {rec.get "key"} asa String}
    }
    {return key-list}    
  }
  
  || ======== Operations on the bucket ========
  
  {method public open {add-folder}:void
    def returned-text =
        {popup-text-query
            {hlmessage enter folder name},
            title = {hlmessage Add Folder}
        }
    {if-non-null returned-text then
        {self.bucket-model.add-folder returned-text}
    }
  }
  
  {method public open {choose-and-add-objects}:void
    def url-array =
        {choose-multiple-files
            title = {hlmessage Choose Files for Upload}
        }
    {if-non-null url-array then
        {self.confirm-add-objects url-array}
    }
  }
  
  {method private {confirm-add-objects url-array:UrlArray}:void
    {if-non-null bm = self.bucket-model then
        def fad = {FileAddDialog bm, url-array}
        {fad.add-event-handler
            {on Commit do
                {after 0s do
                    {for u in fad.output-url-array do
                        {self.bucket-model.add-object-from-url u}                    
                    }
                }
            }
        }
        {fad.show
            title = {hlmessage Confirm File Additions}
        }
    }
  }
  
  {method public open {delete-selection
                          show-confirmation-dialog?:bool = true
                      }:void
    {if not self.record-grid.selection.empty? then
        {if show-confirmation-dialog? and
            {popup-question
                {hlmessage Delete the selected resources?},
                title = {hlmessage Confirm Deletion}
            } != Dialog.yes then
            {return}
        }
        || TODO: is there any way to make this operation atomic?
        {for k in {self.get-selected-keys} do
            {self.bucket-model.delete-object k}
        }
    }
  }
  
  {method public open {download-selection
                          to-default-directory?:bool = true
                      }:void
    {if not self.record-grid.selection.empty? then
        let ldir:#LocalDirectory = null
        {if to-default-directory? and
            self.default-download-directory != null
         then
            set ldir = self.default-download-directory
        }
        def download-directory =
            {choose-directory title = {hlmessage Choose Download Directory}}
        {type-switch download-directory
         case local-directory:LocalDirectory do
            set ldir = local-directory
        }
        {if-non-null ldir then
            || TODO: is there any way to make this operation atomic?
            {for k in {self.get-selected-keys} do
                {self.bucket-model.download-object k, ldir}
            }
        }
    }
  }
  
  {method private {go-to-parent}:void
    {self.bucket-model.go-to-parent}
  }
  
||--  {method public open {return-to-cloud}
||--    ||----> TODO: implement to close bucket and return to bucket browser
||--  }
  
}


||--{define-enum package FileAddStatus
||--    unchecked,
||--    valid,
||--    duplicate,
||--    name-conflict
||--}

{define-class package FileAddDialog {inherits Dialog}
  
  field package constant bucket-model:BucketModel
  
  field package constant url-array:UrlArray
  field package constant url-remove-flags:{Array-of bool}
  field package output-url-array:UrlArray
  
||--  field package constant url-status:{HashTable-of Url, FileAddStatus} =
||--      {new {HashTable-of Url, FileAddStatus}}
||--  
||--  field package constant url-name-remappings:{HashTable-of Url, String} =
||--      {new {HashTable-of Url, String}}
  
  field private display-table:Table
  field private ok-button:CommandButton
  field private cancel-button:CommandButton
  
  field private _total-size:int64
  field private total-size-frame:Frame
  
  {constructor package {default
                           bucket-model:BucketModel,
                           url-array:UrlArray,
                           ...
                       }
    set self.bucket-model = bucket-model
    set self.url-array = url-array
    set self.output-url-array = {UrlArray}
    set self.url-remove-flags = {new {Array-of bool}}
    {for i = 0 below url-array.size do
        {self.url-remove-flags.append false}
    }
    
    {construct-super {splice ...}}
    
    set self.total-size-frame = {Frame width = 2cm, halign = 1}
    
    def dt = {Table columns = 4}
    {dt.add {bold {hlmessage Original Name}}}
    {dt.add {bold {hlmessage Renaming}}}
    {dt.add {bold {hlmessage File Size}}}
    {dt.add {bold {hlmessage Skip?}}}    
    set dt.vertical-line-width = 2mm
    set dt.vertical-line-color = FillPattern.transparent
    
    set self.display-table = dt
    set self.ok-button = {ok-button}
    set self.cancel-button = {cancel-button}
    
    {for u key i in url-array do
        {self.add-url-line u, i}
    }
    
    {self.add
        {VBox
            self.display-table,
            {hrule},
            {spaced-hbox
                {Fill},
                {bold {hlmessage Total Byte Size}},
                self.total-size-frame
            },
            {Fill height = 5mm},
            {spaced-hbox
                {Fill},
                self.cancel-button,
                self.ok-button
            }
        }
    }
    
    {self.add-event-handler
        {on Commit do
            set self.output-url-array = {UrlArray}
            {for u key i in self.url-array do
                {if self.url-remove-flags[i] then
                    {continue}
                 else
                    {self.output-url-array.append u}
                }
            }
        }
    }
    
    {self.add-event-handler
        {on AttachEvent do
            {after 0s do
                {self.ok-button.become-active}
            }
        }
    }
  }
  
  {getter private {total-size}:int64
    {return self._total-size}
  }
  {setter private {total-size i:int64}:void
    set self._total-size = i
    {self.total-size-frame.add
        replace? = true,
        {pretty-byte-format-proc i}
    }
  }
  
  {method private {add-url-line url:Url, index:int}:uint64
    def dt = self.display-table
    {type-switch {url.resolve}
     case f:LocalFile do
        {dt.add
            {Frame
                {text {value url.filename}},
                tooltip = url.name
            }
        }
        def name-tf = 
            {TextField
                value = url.filename,
                width = 4cm
            }
        {dt.add name-tf}
        def byte-size =
            {if-non-null info = {f.info} then
                info.size
             else
                0
            }
        {inc self.total-size, byte-size}
        {dt.add {pretty-byte-format-proc byte-size}}
        {dt.add
            {CheckButton
                label = {hlmessage Skip},
                {on ValueFinished at cb:CheckButton do
                    set self.url-remove-flags[index] = cb.value
                    {if cb.value then
                        set name-tf.enabled? = false
                        {dec self.total-size, byte-size}
                     else
                        {unset name-tf.enabled?}
                        {inc self.total-size, byte-size}
                    }
                }
            }
        }
    }
    {return 0}
  }
  
}

||--|| ======== Test Code ========
||--
||--{def test-bucket = {Bucket}}
||--{def test-model = {BucketModel test-bucket}}
||--{do
||--    def rand = {Random}
||--    {for i = 0 to 10 do
||--        def rand-fork = {rand.next-float}
||--        def random-size =
||--            {if rand-fork < 0.3 then
||--                {{Random}.next-in-range 0, max-uint8}
||--             elseif rand-fork < 0.7 then
||--                {{Random}.next-in-range 0, max-uint16}
||--             else
||--                {{Random}.next-in-range 0, max-int}
||--            }
||--        {test-model.add-object-info
||--            {ObjectInfo
||--                {format "test object %d", i},
||--                {DateTime},
||--                "asdasd",
||--                random-size,
||--                "class",
||--                null
||--            }
||--        }
||--    }
||--}
||--
||--{value
||--    def bb = {BucketBrowser bucket-model = test-model}
||--    
||--    def skin-gray-factor-1 = 0.95
||--    def skin-gray-factor-2 = 0.98
||--    def bb-skin =
||--        {ShadedSkinSpec
||--            {FillPattern.from-rgb
||--                skin-gray-factor-1,
||--                skin-gray-factor-1,
||--                skin-gray-factor-1
||--            },
||--            {FillPattern.from-rgb
||--                skin-gray-factor-2,
||--                skin-gray-factor-2,
||--                skin-gray-factor-2
||--            },
||--            corner-radius = 5mm,
||--            border-color = "gray"
||--        }
||--    
||--||++{after 5s do
||--||++    set bb.bucket-model = null
||--||++}
||--    
||--    {SkinnableFrame
||--        skin = bb-skin,
||--        {Frame
||--            margin = 3mm,
||--            bb
||--        }
||--    }
||--}
||--
