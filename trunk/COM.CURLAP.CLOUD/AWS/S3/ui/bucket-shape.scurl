{curl-file-attributes character-encoding = "utf8"}


{define-class public final BucketShape {inherits Frame}
  
  field private _click-position-x:Distance = 0m
  field private _click-position-y:Distance = 0m
  field private _moving?:bool = false
  
  field private _name:String = ""
  field private _bucket:Bucket
  
  field public x1:Distance = 0mm
  field public y1:Distance = 0mm
  field public x2:Distance = 0mm
  field public y2:Distance = 0mm
  
  field public _animate-timer:Timer
  field public to-x1:Distance = 0mm
  field public to-y1:Distance = 0mm
  field public to-x2:Distance = 0mm
  field public to-y2:Distance = 0mm
  
  
  {constructor {default name:String, bucket:Bucket, ...}
    {construct-super
||++    border-width = 1px,
||++    border-color = {FillPattern.get-violet},
        {splice ...}}
    
    set self._name = name
    set self._bucket = bucket
    
    let is:ImageShape =
        {ImageShape
            {Pixmap.from-url
                {url "./Image/Bucket.png"}
            }
        }
    let txt:TextFlowBox = 
        {TextFlowBox
            horigin = "center",
            vorigin = "center",
            name,
            color = FillPattern.white
        }
    
    {is.add txt}
    
    {self.add is, replace? = true}
    
    set self._animate-timer =
        {Timer
            repeat = 0,
            {on TimerEvent do
                def sx = (self.to-x1 - self.x1) / 10
                def sy = (self.to-y1 - self.y1) / 10
                {(self.parent asa Canvas).shift-xy self, sx, sy}
            },
            interval = 0.1s
        }
  }
  
  {getter public {bucket-name}:String
    {return self._name}
  }
  
  {getter public {bucket}:Bucket
    {return self._bucket}
  }
}
 