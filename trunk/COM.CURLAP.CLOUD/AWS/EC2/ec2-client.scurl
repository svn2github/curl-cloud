
{curl-file-attributes character-encoding = "utf8"}

|| Amazon EC2 Client class
|| Provide EC2 APIs.
{define-class public EC2Client
  
  field private http-requester:EC2HttpRequester
  
  {constructor public {default
                          access-key:String,
                          secret-key:String
                      }
    set self.http-requester = {EC2HttpRequester
                                  access-key,
                                  secret-key
                              }
  }
  
  || Describe Availability Zones
  {method public {describe-availability-zones
                     zone-names:#{Array-of String} = null
                 }:{Array-of AvailabilityZone}
    def params = {{Array-of String} "Action=DescribeAvailabilityZones"}
    let i:int = 1
    {if-non-null zone-names then
        {for zone-name in zone-names do
            {params.append {format "ZoneName.%d=%s", i, zone-name}}
            set i = i + 1
        }
    }
    || request
    def handler = {AvailabilityZoneResponseHandler}
    {self.invoke
        params,
        handler
    }
    {return handler.availability-zones}
  }
  
  || Run Instances
  || ToDo : run-instances should receive more arguments
  {method public {run-instances
                     image-id:String,
                     min-count:int,
                     max-count:int,
                     key-name:#String = null,
                     security-group:#{Array-of String} = null
                 }:RunInstancesResponse
    def params ={{Array-of String}
                    "Action=RunInstances",
                    {format "ImageId=%s", image-id},
                    {format "MinCount=%d", min-count},
                    {format "MaxCount=%d", max-count}
                }
    {if-non-null key-name then
        {params.append {format "KeyName=%s", key-name}}
    }
    {if-non-null security-group then
        let i:int = 1
        {for name in security-group do
            {params.append {format "SecurityGroup.%d=%s", i, name}}
            set i = i + 1
        }
    }
    || request
    def handler = {RunInstancesResponseHandler}
    {self.invoke
        params,
        handler
    }
    {return handler.run-instances-response}
  }
  
  || Terminate Instances
  {method public {terminate-instances instance-id:String}:TerminateInstancesResponse
    def params = {{Array-of String}
                     "Action=TerminateInstances",
                     {format "InstanceId=%s", instance-id}
                 }
    || request
    def handler = {TerminateInstancesResponseHandler}
    {self.invoke
        params,
        handler
    }
    {return handler.terminate-instances-response}
  }
  
  || Describe Instances
  {method public {describe-instances
                     instance-ids:#{Array-of String} = null
                 }:DescribeInstancesResponse
    def params = {{Array-of String} "Action=DescribeInstances"}
    let i:int = 1
    {if-non-null instance-ids then
        {for instance-id in instance-ids do
            {params.append {format "InstanceId.%d=%s", i, instance-id}}
            set i = i + 1
        }
    }
    || request
    def handler = {DescribeInstancesResponseHandler}
    {self.invoke
        params,
        handler
    }
    {return handler.describe-instances-response}
  }
  
  || Get and parse XML file.
  {method private {invoke
                      request-params:{Array-of String},
                      response-handler:EC2ResponseHandler
                  }:void
    {try
        def response = {self.http-requester.request
                           request-params
                       }
        def parser:SAXParser = {SAXParser}
        {parser.set-content-handler response-handler}
        {parser.set-error-handler response-handler}
        def input-stream = {InputSource character-stream = response}
        {parser.parse input-stream}
     catch ec2-e:EC2Exception do
        {throw ec2-e}
     catch e:Exception do
        {throw {EC2Exception "Exception", e.message}}
    }
  }
}
