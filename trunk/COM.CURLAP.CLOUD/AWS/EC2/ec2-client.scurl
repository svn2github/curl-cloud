
{curl-file-attributes character-encoding = "utf8"}

|| Amazon EC2 Client class
|| Provide EC2 APIs.
{define-class public EC2Client
  
  field private access-key:String
  field private secret-key:String
  field private http-requester:HttpRequester = {HttpRequester}
  
  {constructor public {default access-key:String, secret-key:String}
    set self.access-key = access-key
    set self.secret-key = secret-key
  }
  
  || Describe Availability Zones
  {method public {describe-availability-zones
                     zone-names:#{Array-of String} = null
                 }:{Array-of AvailabilityZone}
    def request-parameters = {{Array-of String} "Action=DescribeAvailabilityZones"}
    let i:int = 1
    {if-non-null zone-names then
        {for zone-name in zone-names do
            {request-parameters.append {format "ZoneName.%d=%s", i, zone-name}}
            set i = i + 1
        }
    }
    let response:#HttpTextInputStream
    {try
        set response = {self.http-requester.request
                           request-parameters,
                           self.access-key,
                           self.secret-key
                       }
        let availability-zone-parser:SAXParser = {SAXParser}
        let availability-zone-handler:AvailabilityZoneHandler = {AvailabilityZoneHandler}
        {availability-zone-parser.set-content-handler availability-zone-handler}
        {availability-zone-parser.set-error-handler availability-zone-handler}
        def input-stream = {InputSource character-stream = response}
        {availability-zone-parser.parse input-stream}
        {return availability-zone-handler.availability-zones}
     catch ec2-e:EC2Exception do
        {throw ec2-e}
     catch e:Exception do
        {throw {EC2Exception "Exception", e.message}}
    }
  }
  
  || Run Instances
  || ToDo : run-instances should receive more arguments
  {method public {run-instances
                     image-id:String,
                     min-count:int,
                     max-count:int,
                     key-name:#String = null,
                     security-group:#{Array-of String} = null
                 }:RunInstancesResponse
    def request-parameters ={{Array-of String}
                                "Action=RunInstances",
                                {format "ImageId=%s", image-id},
                                {format "MinCount=%d", min-count},
                                {format "MaxCount=%d", max-count}
                            }
    {if-non-null key-name then
        {request-parameters.append {format "KeyName=%s", key-name}}
    }
    {if-non-null security-group then
        let i:int = 1
        {for name in security-group do
            {request-parameters.append {format "SecurityGroup.%d=%s", i, name}}
            set i = i + 1
        }
    }
    {try
        def response = {self.http-requester.request
                               request-parameters,
                               self.access-key,
                               self.secret-key
                           }
        let run-instances-parser:SAXParser = {SAXParser}
        let run-instances-handler:RunInstancesResponseHandler = {RunInstancesResponseHandler}
        {run-instances-parser.set-content-handler run-instances-handler}
        {run-instances-parser.set-error-handler run-instances-handler}
        def input-stream = {InputSource character-stream = response}
        {run-instances-parser.parse input-stream}
        {return run-instances-handler.run-instances-response}
     catch ec2-e:EC2Exception do
        {throw ec2-e}
     catch e:Exception do
        {throw {EC2Exception "Exception", e.message}}
    }
  }
  
  || Terminate Instances
  {method public {terminate-instances instance-id:String}:TerminateInstancesResponse
    def request-parameters = {{Array-of String}
                                 "Action=TerminateInstances",
                                 {format "InstanceId=%s", instance-id}
                             }
    {try
        def response = {self.http-requester.request
                               request-parameters,
                               self.access-key,
                               self.secret-key
                       }
        let terminate-instances-parser:SAXParser = {SAXParser}
        let terminate-instances-handler:TerminateInstancesResponseHandler = {TerminateInstancesResponseHandler}
        {terminate-instances-parser.set-content-handler terminate-instances-handler}
        {terminate-instances-parser.set-error-handler terminate-instances-handler}
        def input-stream = {InputSource character-stream = response}
        {terminate-instances-parser.parse input-stream}
        {return terminate-instances-handler.terminate-instances-response}
     catch ec2-e:EC2Exception do
        {throw ec2-e}
     catch e:Exception do
        {throw {EC2Exception "Exception", e.message}}
    }
  }
  
  || Describe Instances
  {method public {describe-instances
                     instance-ids:#{Array-of String} = null
                 }:DescribeInstancesResponse
    def request-parameters = {{Array-of String} "Action=DescribeInstances"}
    let i:int = 1
    {if-non-null instance-ids then
        {for instance-id in instance-ids do
            {request-parameters.append {format "InstanceId.%d=%s", i, instance-id}}
            set i = i + 1
        }
    }
    {try
        def response = {self.http-requester.request
                               request-parameters,
                               self.access-key,
                               self.secret-key
                       }
        let describe-instances-parser:SAXParser = {SAXParser}
        let describe-instances-handler:DescribeInstancesResponseHandler = {DescribeInstancesResponseHandler}
        {describe-instances-parser.set-content-handler describe-instances-handler}
        {describe-instances-parser.set-error-handler describe-instances-handler}
        def input-stream = {InputSource character-stream = response}
        {describe-instances-parser.parse input-stream}
        {return describe-instances-handler.describe-instances-response}
     catch ec2-e:EC2Exception do
        {throw ec2-e}
     catch e:Exception do
        {throw {EC2Exception "Exception", e.message}}
    }
  }
}
