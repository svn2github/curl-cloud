
{curl-file-attributes character-encoding = "utf8"}

|| Amazon EC2 Client class
|| Provide EC2 APIs.
{define-class public EC2Client
  
  field private access-key:String
  field private secret-key:String
  field private http-requester:HttpRequester = {HttpRequester}
  
  {constructor public {default access-key:String, secret-key:String}
    set self.access-key = access-key
    set self.secret-key = secret-key
  }
  
  || Describe Availability Zones
  {method public {describe-availability-zones zone-names:{Array-of String}}:{Array-of AvailabilityZone}
    def request-parameters = {{Array-of String} "Action=DescribeAvailabilityZones"}
    let i:int = 1
    {for zone-name in zone-names do
        {request-parameters.append {format "ZoneName.%d=%s", i, zone-name}}
        set i = i + 1
    }
    {try
        def response = {self.http-requester.request
                               request-parameters,
                               self.access-key,
                               self.secret-key
                           }
        let availability-zone-parser:SAXParser = {SAXParser}
        let availability-zone-handler:AvailabilityZoneHandler = {AvailabilityZoneHandler}
        {availability-zone-parser.set-content-handler availability-zone-handler}
        {availability-zone-parser.set-error-handler availability-zone-handler}
        def input-stream = {InputSource character-stream = response}
        {availability-zone-parser.parse input-stream}
        {return availability-zone-handler.availability-zones}
     catch ec2-e:EC2Exception do
        {throw ec2-e}
     catch e:Exception do
        {throw {EC2Exception "Exception", e.message}}
    }
  }
  
  {method public {run-instances
                     image-id:String,
                     min-count:int,
                     max-count:int
                 }:RunInstancesResponse
    def request-parameters ={{Array-of String}
                                "Action=RunInstances",
                                {format "ImageId=%s", image-id},
                                {format "MinCount=%d", min-count},
                                {format "MaxCount=%d", max-count}
                            }
    {try
        def response = {self.http-requester.request
                               request-parameters,
                               self.access-key,
                               self.secret-key
                           }
        let run-instances-parser:SAXParser = {SAXParser}
        let run-instances-handler:RunInstancesResponseHandler = {RunInstancesResponseHandler}
        {run-instances-parser.set-content-handler run-instances-handler}
        {run-instances-parser.set-error-handler run-instances-handler}
        def input-stream = {InputSource character-stream = response}
        {run-instances-parser.parse input-stream}
        {return run-instances-handler.run-instances-response}
     catch ec2-e:EC2Exception do
        {throw ec2-e}
     catch e:Exception do
        {throw {EC2Exception "Exception", e.message}}
    }
  }
  
  {method public {terminate-instances instance-id:String}:TerminateInstancesResponse
    def request-parameters = {{Array-of String}
                                 "Action=TerminateInstances",
                                 {format "InstanceId=%s", instance-id}
                             }
    {try
        def response = {self.http-requester.request
                               request-parameters,
                               self.access-key,
                               self.secret-key
                       }
        let terminate-instances-parser:SAXParser = {SAXParser}
        let terminate-instances-handler:TerminateInstancesResponseHandler = {TerminateInstancesResponseHandler}
        {terminate-instances-parser.set-content-handler terminate-instances-handler}
        {terminate-instances-parser.set-error-handler terminate-instances-handler}
        def input-stream = {InputSource character-stream = response}
        {terminate-instances-parser.parse input-stream}
        {return terminate-instances-handler.terminate-instances-response}
     catch ec2-e:EC2Exception do
        {throw ec2-e}
     catch e:Exception do
        {throw {EC2Exception "Exception", e.message}}
    }
  }
  
  {method public {describe-instances}:void
    def request-parameters = {{Array-of String} "Action=DescribeInstances"}
    {try
        def response = {self.http-requester.request
                               request-parameters,
                               self.access-key,
                               self.secret-key
                           }
     catch ec2-e:EC2Exception do
        {throw ec2-e}
     catch e:Exception do
        {throw {EC2Exception "Exception", e.message}}
    }
  }
}



