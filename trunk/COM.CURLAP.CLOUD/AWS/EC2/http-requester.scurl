
{curl-file-attributes character-encoding = "utf8"}

{define-class package HttpRequester
  
  field private signature-generator:SignatureGenerator = {SignatureGenerator}
  
  {method private {get-timestamp}:String
    def time:DateTime = {DateTime zone = DateTimeZone.utc}
    let timestamp:String = {format "%sT%sZ", time.info.iso-date, time.info.iso-time}
    set timestamp = {url-encode-filename timestamp}
    set timestamp = {timestamp.to-upper-clone}
    {return timestamp}
  }
  
  {method private {get-common-query-parameters access-key:String}:{Array-of String}
    {return {{Array-of String}
                "Version=2010-06-15",
                {format "AWSAccessKeyId=%s", access-key},
                {format "Timestamp=%s", {self.get-timestamp}},
                "SignatureMethod=HmacSHA1",
                "SignatureVersion=2"
            }
    }
  }
  
  || Get XML file from EC2
  {method package {request
                      request-parameters:{Array-of String},
                      access-key:String,
                      secret-key:String
                  }:#HttpTextInputStream
    let query-parameters:{Array-of String} = {self.get-common-query-parameters access-key}
    {query-parameters.concat request-parameters}
    let request:String = "http://ec2.amazonaws.com/?"
    {for each-element:String in query-parameters do
        set request = {format "%s%s&", request, each-element}
    }
    set request = {format "%sSignature=%s", request,
                      {self.signature-generator.get-signature query-parameters, secret-key}
                  }
    let http-file:HttpFile = {{abs-url request}.instantiate-File} asa HttpFile
    {try
        def response = {http-file.http-read-open always-return-response-headers? = true}
        {switch response.response-headers.status
            || FIXME : Cannot receive XML when response header status is 401
         case 400, 401, 403, 404, 409 do
            let ec2-error-parser:SAXParser = {SAXParser}
            let ec2-error-handler:EC2ErrorHandler = {EC2ErrorHandler}
            {ec2-error-parser.set-content-handler ec2-error-handler}
            {ec2-error-parser.set-error-handler ec2-error-handler}
            {ec2-error-parser.parse {InputSource character-stream = response}}
            def error = ec2-error-handler.ec2-errors[0]
            {throw {EC2Exception error.code, error.message}}
         else
            {return response}
        }
     catch e:HttpException do
        {throw {EC2Exception "HTTP Exception", e.message}}
    }
  }
}
