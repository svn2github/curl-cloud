{curl-file-attributes character-encoding = "utf8"}

{doc-next
    {purpose サーバインスタンスクラス}
    {details サーバインスタンスの起動/停止/プロパティ表示を行う。}
}
{define-class public final ServerShape {inherits Frame}
  
  field private _click-position-x:Distance = 0m
  field private _click-position-y:Distance = 0m
  field private _moving?:bool = false
  
  field public x1:Distance = 0mm
  field public y1:Distance = 0mm
  field public x2:Distance = 0mm
  field public y2:Distance = 0mm
  
  field public _animate-timer:Timer
  field public to-x1:Distance = 0mm
  field public to-y1:Distance = 0mm
  field public to-x2:Distance = 0mm
  field public to-y2:Distance = 0mm
  
  field private _ec2client:EC2Client
  field private _instance:RunningInstance
  field package _balloon:#BalloonView = null
  
  {constructor {default
                   ec2client:EC2Client,
                   instance:RunningInstance,
                   ...
               }
    {construct-super
        {splice ...}}
    
    set self._ec2client = ec2client
    set self._instance = instance
    
    || サーバインスタンス起動中のイメージ
    def on_image = {image
                       source = {url "./Image/server_on.gif"}
                   }
||++let is_on:ImageShape =
||++    {ImageShape
||++        {Pixmap.from-url
||++            {url "./Image/server_on.gif"}
||++        }
||++    }
    
    || サーバインスタンス停止中のイメージ
    let is_off:ImageShape =
        {ImageShape
            {Pixmap.from-url
                {url "./Image/server_off.png"}
            }
        }
    || プロパティ
    let properties:VBox = 
        {VBox
            horigin = "center",
            vorigin = "center",
            margin = 4px,
            {self.create-item "InstanceID：",    instance.instance-id},
            {self.create-item "ImageID：",       instance.image-id},
            {self.create-item "InstanceState：", instance.instance-state.name},
            {self.create-item "InstanceType：",  instance.instance-type},
            {self.create-item "Architecture：",  instance.architecture}
        }
    
    || 初期のサーバイメージの設定
    {switch instance.instance-state.code
     case 0, 16 do
        {self.add on_image, replace? = true}
     case 32, 48, 64, 80 do
        {self.add is_off, replace? = true}
    }
    
    {self.add-event-handler
        {on e:PointerPress do
||++        || 左クリックの場合、インスタンス起動/停止メソッドを実行する。
||++        {if e.button == 1 then
||++            || 今は、サーバイメージの切り替えしか行っていません。
||++            || インスタンスがrunningのとき，インスタンスを停止
||++            {if self._instance.instance-state.code == 16 then
||++                {self._ec2client.terminate-instances
||++                    self._instance.instance-id
||++                }
||++             else
||++                {self._ec2client.run-instances
||++                    self._instance.instance-id,
||++                    1,
||++                    1
||++                }
||++            }
||++        }
            || 右クリックの場合、プロパティを表示する。
            {if e.button == 3 then
                || プロパティが表示されているかチェック 
                {if self._balloon == null then
                    || プロパティの表示
                    set self._balloon = {self.create-balloon properties, e.x, e.y}
                    {self._balloon.add-event-handler
                        {context-popup
                            menu-pane = {MenuPane}
                        }
                    }
                 else
                    || プロパティの破棄
                    {if not self._balloon.destroyed? then
                        {self._balloon.destroy}
                    }
                    || プロパティの表示
                    set self._balloon = {self.create-balloon properties, e.x, e.y}
                    {self._balloon.add-event-handler
                        {context-popup
                            menu-pane = {MenuPane}
                        }
                    }
                }   
            }
            || 左クリックの場合、インスタンスが起動していたら停止する．
            {if e.button == 1 then
                {switch self._instance.instance-state.code
                 case 0, 16 do
                    def ret = {popup-question "インスタンスを停止しますか?"}
                    {if ret == Dialog.yes then
                        {try
                            {self._ec2client.terminate-instances
                                self._instance.instance-id
                            }
                            {popup-message "インスタンスを停止しました．"}
                         catch e:EC2Exception do
                            {popup-message e.message, title = e.code}
                        }
                    }
                }
            }
        }
    }
    
    set self._animate-timer =
        {Timer
            repeat = 0,
            {on TimerEvent do
                def sx = (self.to-x1 - self.x1) / 10
                def sy = (self.to-y1 - self.y1) / 10
                {(self.parent asa Canvas).shift-xy self, sx, sy}
            },
            interval = 0.1s
        }
  }
    
  {doc-next
    {purpose プロパティの生成}
    {parameter properties, プロパティの内容}
    {parameter x, ポインタのX座標}
    {parameter y, ポインタのY座標}
    {return-vals BalloonView, プロパティビュー}
  }
  {method private {create-balloon
                      properties:VBox,
                      x:Distance,
                      y:Distance}:BalloonView
    {return
        {BalloonView
            properties,
            self,
            x,
            y,
            title = "プロパティ",
            tail-size = 25pt,
            max-width = 8in,
            corner-radius = 15pt,
            close-button? = true,
            {on e:PointerMotion at bv:BalloonView do
                {dump e.x, e.y}
            }
        }
    }
  }
  
  {doc-next
    {purpose プロパティ項目の生成}
    {parameter item, 項目}
    {parameter value, 値}
    {return-vals HBox, プロパティの項目}
  }
  {method private {create-item
                      item:String,
                      value:String}:HBox
    {return
        {HBox
            horigin = "center",
            vorigin = "center",
            text-selectable? = false,
            font-weight = FontWeight.bold,
            item,
            value,
            color = FillPattern.blue
        }
    }
  }
  
}
